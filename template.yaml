AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  ledgerstore

  Powertools example

Globals: # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-specification-template-anatomy-globals.html
  Function:
    Timeout: 5
    MemorySize: 128
    Runtime: python3.9
    Tracing: Active
  Api:
    TracingEnabled: True

Resources:
  IdempotencyTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: expiration
        Enabled: true
      BillingMode: PAY_PER_REQUEST
  BalanceFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      Handler: app.lambda_handler
      CodeUri: ./src/balance
      Description: Balance function
      Architectures:
        - x86_64
      Tracing: Active
      Events:
        RewardsApi:
          Type: Api
          Properties:
            Path: /balance
            Method: GET
            RestApiId: !Ref RewardsApi  # Add this line
        # Powertools env vars: https://awslabs.github.io/aws-lambda-powertools-python/#environment-variables
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: PowertoolsBalance
          POWERTOOLS_METRICS_NAMESPACE: Powertools
          LOG_LEVEL: INFO
      Tags:
        LambdaPowertools: python
  MyCognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Join [ '-', [ 'rewards-user-pool' , Ref: "AWS::StackName" ]]
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false
  MyCognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref MyCognitoUserPool
      #ClientName: !Ref CognitoUserPoolClientName
      GenerateSecret: false
  RewardsApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors: "'*'"
      Auth:
        DefaultAuthorizer: MyCognitoAuthorizer
        Authorizers:
          MyCognitoAuthorizer:
            UserPoolArn: !GetAtt MyCognitoUserPool.Arn
Outputs:
#  CognitoID:
#    Description: "The Cognito UserPool ID"
#    Value: !Ref UserPool
#  CognitoClientID:
#    Description: "The Cognito UserPool Client ID"
#    Value: !Ref UserPoolClient
  RewardsApi:
    Description: "API Gateway endpoint URL for Prod stage for Rewards functions"
    Value: !Sub "https://${RewardsApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/rewards/"

  BalanceFunction:
    Description: "Balance Lambda Function ARN"
    Value: !GetAtt BalanceFunction.Arn
